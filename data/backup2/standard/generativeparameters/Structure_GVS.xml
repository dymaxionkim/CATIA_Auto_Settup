<?xml version="1.0" ?>
<std:node name="Generativeparameters" type="Generativeparameters" xmlns:std="http://www.dsweb.com/std">
  <!-- Enums definition...DO NOT TOUCH-->
  <std:enumdef name="FilletRep">
    <std:strval>None</std:strval>
    <std:strval>Boundaries</std:strval>
    <std:strval>Symbolic</std:strval>
    <std:strval>OriginalEdges</std:strval>
    <std:strval>ProjectedOriginalEdges</std:strval>
  </std:enumdef>
  <std:enumdef name="YesNo">
    <std:strval>No</std:strval>
    <std:strval>Yes</std:strval>
  </std:enumdef>
  <std:enumdef name="DistanceMode">
    <std:strval>Relative</std:strval>
    <std:strval>Absolute</std:strval>
  </std:enumdef>
  <std:typedef name="DraftingOptions">
    <std:intval name="HiddenLines">0</std:intval>
    <std:intval name="CutInSection">1</std:intval>
    <std:intval name="UseWhenProjected">1</std:intval>
  </std:typedef>
  <std:enumdef name="ProfileLocation">
    <std:strval>Start</std:strval>
    <std:strval>End</std:strval>
    <std:strval>Middle</std:strval>
  </std:enumdef>
  <std:enumdef name="OpeningCenterlines">
    <std:strval>No centerlines</std:strval>
    <std:strval>Long centerlines</std:strval>
    <std:strval>Short centerlines</std:strval>
    <std:strval>DashX centerlines</std:strval>
  </std:enumdef>
  <std:enumdef name="OblongOpeningCenterlines">
    <std:strval>Single centerlines</std:strval>
    <std:strval>Double centerlines</std:strval>
    <std:strval>DashX centerlines</std:strval>
  </std:enumdef>
  <std:enumdef name="AxisTypeEnum">
    <std:strval>Single</std:strval>
    <std:strval>Double</std:strval>
  </std:enumdef>
  <std:enumdef name="MaterialExtrusion">
    <std:strval>None</std:strval>
    <std:strval>Tick mark (true width)</std:strval>
    <std:strval>Throw orientation (symbolic)</std:strval>
    <std:strval>Tick mark and throw orientation</std:strval>
  </std:enumdef>
  <std:enumdef name="ElecGraphicRepresentation">
    <std:strval name="ElecGraphicRepresentation">DoubleLine</std:strval>
    <std:strval name="ElecGraphicRepresentation">SingleLine</std:strval>
  </std:enumdef>
  <std:enumdef name="ElecGraphicReplacement">
    <std:strval name="ElecGraphicReplacement">3Dprojection</std:strval>
    <std:strval name="ElecGraphicReplacement">2Ddetail</std:strval>
  </std:enumdef>
  <std:enumdef name="drafttextframe">
    <std:strval>None</std:strval>
    <std:strval>Rectangle</std:strval>
    <std:strval>Square</std:strval>
    <std:strval>Circle</std:strval>
    <std:strval>ScoredCircle</std:strval>
    <std:strval>Diamond</std:strval>
    <std:strval>Triangle</std:strval>
    <std:strval>RightFlag</std:strval>
    <std:strval>LeftFlag</std:strval>
    <std:strval>BothFlag</std:strval>
    <std:strval>Oblong</std:strval>
    <std:strval>Ellipse</std:strval>
  </std:enumdef>
  <std:enumdef name="framelineposition">
    <std:strval>Centered</std:strval>
    <std:strval>AboveTheLine</std:strval>
    <std:strval>BelowTheLine</std:strval>
  </std:enumdef>
  <std:enumdef name="frametextposition">
    <std:strval>Above</std:strval>
    <std:strval>Below</std:strval>
  </std:enumdef>
  <std:enumdef name="framespacingtype">
    <std:strval>Distance</std:strval>
    <std:strval>Space</std:strval>
  </std:enumdef>
  <!-- End of Enum definition-->
  <std:node name="Drafting">
    <!--   Drafting application parameters-->
    <std:node name="Generate">
      <std:node name="AxisLines">
        <std:enumval name="YesNo">Yes</std:enumval>
      </std:node>
      <std:node name="CenterLines">
        <std:enumval name="YesNo">Yes</std:enumval>
      </std:node>
      <std:node name="Fillets">
        <std:enumval name="FilletRep">Boundaries</std:enumval>
      </std:node>
      <std:node name="HiddenLines">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="Threads">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="3DPoints">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="Wireframe">
        <std:enumval name="YesNo">Yes</std:enumval>
      </std:node>
      <std:node name="Using3Dspec">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <std:node name="Using3DColors">
        <std:enumval name="YesNo">No</std:enumval>
      </std:node>
      <!-- fin noeud Generate-->
    </std:node>
    <std:node name="ViewDressup">
      <std:node name="Operators">
        <std:node name="Section">
          <std:node name="Visible">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="SkinSection">
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Linetype">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <std:node name="SolidSection">
            <std:node name="Color">
              <std:colorval>0 0 0</std:colorval>
            </std:node>
            <std:node name="Linetype">
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="Thickness">
              <std:intval>1</std:intval>
            </std:node>
          </std:node>
          <!-- fin noeud Section-->
        </std:node>
        <std:node name="Detail">
          <std:node name="Visible">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="Break">
          <std:node name="Visible">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>4</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>2</std:intval>
          </std:node>
        </std:node>
        <std:node name="Breakout">
          <std:node name="Visible">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>8</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>2</std:intval>
          </std:node>
        </std:node>
        <!-- fin noeud Operators-->
      </std:node>
      <std:node name="3DInheritance">
        <std:node name="Wireframe">
          <std:node name="Color">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Linetype">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Thickness">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
        </std:node>
        <std:node name="Solid">
          <std:node name="Color">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Linetype">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Thickness">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
        </std:node>
        <std:node name="3DPoints">
          <std:node name="Color">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="Symbol">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
        </std:node>
        <!--Fin noeud 3DInheritance-->
      </std:node>
      <std:node name="GeneratedGeometry">
        <std:node name="VividEdges">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>2</std:intval>
          </std:node>
        </std:node>
        <std:node name="HiddenEdges">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>3</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="Fillets">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="Wireframe">
          <std:node name="Color">
            <std:colorval>0 0 0</std:colorval>
          </std:node>
          <std:node name="Linetype">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="Thickness">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="3DPoints">
          <std:node name="Symbol">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <!--Fin noeud GeneratedGeometry-->
      </std:node>
      <!--Fin noeud ViewDressUP-->
    </std:node>
    <!--End of Drafting-->
  </std:node>
  <std:node name="Structure">
    <std:node name="Version">
      <std:strval>V5R19GA</std:strval>
    </std:node>
    <std:node name="ReferencePlaneSystem">
      <!-- REFERENCE PLANE SYSTEM -->
      <std:node name="Draw">
        <!-- Should it draw any ReferencePlaneSystem? -->
        <!-- Values are No ____ the ReferencePlaneSystem will not be extracted -->
        <!--            Yes ___ the ReferencePlaneSystem will be extracted (** default **) -->
        <std:enumval name="YesNo">Yes</std:enumval>
      </std:node>
      <std:node name="XGRID">
        <!-- Specification for the X grid display -->
        <std:node name="Draw">
          <!-- Should it draw the X grid? -->
          <!-- Values are No ____ the X grid will not be extracted -->
          <!--            Yes ___ the X grid will be extracted (** default **) -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="MainGrid">
          <!-- Specification for the main grid display -->
          <std:node name="Draw">
            <!-- Should it draw the reference plane system ? -->
            <!-- Values are No ___ no reference plane system will be drawn (** default **) -->
            <!--            Yes __ reference plane systems will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="RestrictedToTheBoundingBox">
            <!-- Should the reference plane systems be restricted to the generated object(s) bounding box -->
            <!-- Values are No ___ the entire reference plane systems line will be drawn (except in case of clipping) (** default **) -->
            <!--            Yes __ the reference plane systems will be restricted -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridsetPosition" minval="0" maxval="1">
            <!-- Positionnement of the reference plane systems according to the generated view -->
            <!-- Values are 0 ____ the reference plane systems are generated where the set of planes is located (** default **) -->
            <!--            1 ____ the reference plane systems are specified -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="GridSetSelection">
            <!-- Specify where the grids shoule be placed ? -->
            <std:node name="GridLeft">
              <!-- Should it draw the reference plane system on the left side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the left side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the left side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridRight">
              <!-- Should it draw the reference plane system on the right side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the right side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the right side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridTop">
              <!-- Should it draw the reference plane system on the top side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the top side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the top side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridBottom">
              <!-- Should it draw the reference plane system on the bottom side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the bottom side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the bottom side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Offset">
            <!-- The horizontal offset to add between the generated view and the vertical reference plane system in millimeters -->
            <!-- Default value is 35.0 millimeters -->
            <std:floatval>35</std:floatval>
          </std:node>
          <std:node name="ShowMedian">
            <!-- Should the median of the main grid be displayed ? -->
            <!-- Values are No ___ the median of the main grid will not be displayed -->
            <!--            Yes __ the median of the main grid display will be diaplyed (** default **) -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridSetLineType" minval="1" maxval="63">
            <!-- The linetype index to use for Grid Set representation -->
            <!-- Default value is 1 (solid linetype) -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="TickSize">
            <!-- The size of the ticks in millimeters -->
            <!-- Default value is 2.0 millimeters -->
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="AnnotationStyle" minval="0" maxval="3">
            <!-- Style of the annotation of the frames -->
            <!-- Values are 0 ____ no annotation  -->
            <!--            1 ____ frames names (** default **) -->
            <!--            2 ____ offset from the origin with the units -->
            <!--            3 ____ offset from the origin without the units -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="AnnotationSize">
            <!-- Size of the annotations -->
            <!-- Default value is 2.0 millimeters -->
            <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
            <std:floatval>2.0</std:floatval>
          </std:node>
          <std:node name="AnnotationFrame">
            <!-- Type of Annotation Frame for the applied annotation -->
            <!-- Default value is "None" -->
            <std:enumval name="drafttextframe">None</std:enumval>
          </std:node>
          <std:node name="AnnotationStep" minval="1">
            <!-- Step between 2 annotations -->
            <!-- Default value is 1 (means you have an annotation on each stick) -->
            <std:intval>3</std:intval>
          </std:node>
          <std:node name="AnnotationStart">
            <!-- The first annotation position-->
            <!-- Default value is -100 to display all frames in within th ebounding box -->
            <std:intval>-100</std:intval>
          </std:node>
          <std:node name="Elevations">
            <std:node name="Draw">
              <!-- Should it draw the orientation symbol ? -->
              <!-- Values are No ___ no orientation will be drawn -->
              <!--            Yes __ the orientation will be drawn (** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="ZPlusOrient_Symbol">
              <!-- The letter used for ZPlusOrient orientation -->
              <!-- Default value is "U" -->
              <std:strval>U</std:strval>
            </std:node>
            <std:node name="ZMinOrientName_Symbol">
              <!-- The letter used for ZMinOrientName orientation -->
              <!-- Default value is "L" -->
              <std:strval>L</std:strval>
            </std:node>
            <std:node name="XPlusOrientName_Symbol">
              <!-- The letter used for XPlusOrientName orientation -->
              <!-- Default value is "A" -->
              <std:strval>A</std:strval>
            </std:node>
            <std:node name="XMinOrientName_Symbol">
              <!-- The letter used for XMinOrientName orientation -->
              <!-- Default value is "F" -->
              <std:strval>F</std:strval>
            </std:node>
            <std:node name="YPlusOrientName_Symbol">
              <!-- The letter used for YPlusOrientName orientation -->
              <!-- Default value is "S" -->
              <std:strval>S</std:strval>
            </std:node>
            <std:node name="YMinOrientName_Symbol">
              <!-- The letter used for YMinOrientName orientation -->
              <!-- Default value is "P" -->
              <std:strval>P</std:strval>
            </std:node>
            <std:node name="HullInOrientName_Symbol">
              <!-- The letter used for HullInOrientName orientation -->
              <!-- Default value is "I" -->
              <std:strval>I</std:strval>
            </std:node>
            <std:node name="HullOutOrientName_Symbol">
              <!-- The letter used for outboard orientation -->
              <!-- Default value is "O" -->
              <std:strval>O</std:strval>
            </std:node>
            <std:node name="FontSize">
              <!-- The size of the piece part number text -->
              <!-- Default is 2.0 -->
              <std:floatval>1.5</std:floatval>
            </std:node>
            <!-- end Elevations-->
          </std:node>
          <std:node name="StandardFrame">
            <!-- Specification for the display of type = Standard frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the Standard frames ? -->
              <!-- Values are No ___ no standard frameswill be drawn -->
              <!--            Yes __ standard frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Standard frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>2</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!--end Elevations-->
          </std:node>
          <std:node name="WebFrame">
            <!-- Specification for the display of type = Web frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the Web frames ? -->
              <!-- Values are No ___ no web frames will be drawn -->
              <!--            Yes __ web frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!-- end WebFrame-->
          </std:node>
          <std:node name="SpecialFrame">
            <!-- Specification for the display of type = Special frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the SpecialWeb frames ? -->
              <!-- Values are No ___ no special frames will be drawn -->
              <!--            Yes __ special frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!-- end SpecialFrame-->
          </std:node>
          <std:node name="AFT">
            <!-- Specification for the display of category = AFT frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the AFT frames ? -->
              <!-- Values are No ___ no AFT frames will be drawn -->
              <!--            Yes __ AFT frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
          </std:node>
          <std:node name="MFZ">
            <!-- Specification for the display of category = MFT frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the MFZ frames ? -->
              <!-- Values are No ___ no MFX frames will be drawn -->
              <!--            Yes __ MFX frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="SpacingGrid">
          <!-- Specification for the spacing grid display -->
          <std:node name="SpacingGridStyle">
            <!-- Which style of the spacing grid should be displayed? -->
            <!-- Values are Distance(** default **) -->
            <!--            Space -->
            <std:enumval name="framespacingtype">Distance</std:enumval>
          </std:node>
          <std:node name="ShowSpacingGrid">
            <!-- Should it draw the spacing grid ? -->
            <!-- Values are No ___ no spacing grid will be drawn -->
            <!--            Yes __ spacing grid will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="RestrictedToTheBoundingBox">
            <!-- Should the spacing grid be restricted to the generated object(s) bounding box -->
            <!-- Values are No ___ the spacing grid systems line will be drawn (except in case of clipping) (** default **) -->
            <!--            Yes __ the spacing grid will be restricted -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridsetPosition" minval="0" maxval="1">
            <!-- Positionnement of the reference plane systems according to the generated view -->
            <!-- Values are 0 ____ the reference plane systems are generated where the set of planes is located (** default **) -->
            <!--            1 ____ the reference plane systems are specified -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="GridSetSelection">
            <!-- Specify where the grids shoule be placed ? -->
            <std:node name="GridLeft">
              <!-- Should it draw the spacing grid on the left side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the left side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the left side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridRight">
              <!-- Should it draw the spacing grid on the right side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the right side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the right side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridTop">
              <!-- Should it draw the reference plane system on the top side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the top side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the top side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridBottom">
              <!-- Should it draw the spacing grid on the bottom side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the bottom side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the bottom side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Offset1">
            <!-- The offset to add between the generated view and the median in millimeters -->
            <!-- Default value is 20.0 millimeters -->
            <std:floatval>20</std:floatval>
          </std:node>
          <std:node name="Offset2">
            <!-- The offset to add between the generated view and the 2nd median in millimeters -->
            <!-- Default value is 30.0 millimeters -->
            <std:floatval>30</std:floatval>
          </std:node>
          <std:node name="TickSize">
            <!-- The size of the ticks in millimeters -->
            <!-- Default value is 2.0 millimeters -->
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="AnnotationSize">
            <!-- Size of the annotations -->
            <!-- Default value is 2.0 millimeters -->
            <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
            <std:floatval>2.0</std:floatval>
          </std:node>
          <std:node name="TextPosition">
            <!-- The position of the text relative to the graduation -->
            <!-- Default value is below-->
            <std:enumval name="frametextposition">Below</std:enumval>
          </std:node>
          <std:node name="MidshipsSymbolDisplay">
            <!-- Should it draw the midships symbol ? -->
            <!-- Values are No ___ no midships symbol will be drawn (** default **) -->
            <!--            Yes __ midships symbol will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="MidshipsSymbolChapterName">
            <!-- The name of the chapter containing midships symbol within the Drawing Symbol Structure Catalog (refer to PRM file) -->
            <!-- Default value is "MTOs" -->
            <std:strval>Structure</std:strval>
          </std:node>
          <std:node name="MidshipsDetailName">
            <!-- The name of the detail within the catalog to instanciate for Midships Detail Name -->
            <!-- Default value is "MidShip" -->
            <std:strval>MidShip</std:strval>
          </std:node>
        </std:node>
        <!--end XGRID-->
      </std:node>
      <std:node name="YGRID">
        <!-- Specification for the Y grid display -->
        <std:node name="Draw">
          <!-- Should it draw the Y grid? -->
          <!-- Values are No ____ the Y grid will not be extracted -->
          <!--            Yes ___ the Y grid will be extracted (** default **) -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="MainGrid">
          <!-- Specification for the main grid display -->
          <std:node name="Draw">
            <!-- Should it draw the reference plane system ? -->
            <!-- Values are No ___ no reference plane system will be drawn (** default **) -->
            <!--            Yes __ reference plane systems will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="RestrictedToTheBoundingBox">
            <!-- Should the reference plane systems be restricted to the generated object(s) bounding box -->
            <!-- Values are No ___ the entire reference plane systems line will be drawn (except in case of clipping) (** default **) -->
            <!--            Yes __ the reference plane systems will be restricted -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridsetPosition" minval="0" maxval="1">
            <!-- Positionnement of the reference plane systems according to the generated view -->
            <!-- Values are 0 ____ the reference plane systems are generated where the set of planes is located (** default **) -->
            <!--            1 ____ the reference plane systems are specified -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="GridSetSelection">
            <!-- Specify where the grids shoule be placed ? -->
            <std:node name="GridLeft">
              <!-- Should it draw the reference plane system on the left side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the left side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the left side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridRight">
              <!-- Should it draw the reference plane system on the right side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the right side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the right side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridTop">
              <!-- Should it draw the reference plane system on the top side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the top side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the top side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridBottom">
              <!-- Should it draw the reference plane system on the bottom side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the bottom side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the bottom side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <!--end GridSelection-->
          </std:node>
          <std:node name="Offset">
            <!-- The horizontal offset to add between the generated view and the vertical reference plane system in millimeters -->
            <!-- Default value is 35.0 millimeters -->
            <std:floatval>35</std:floatval>
          </std:node>
          <std:node name="ShowMedian">
            <!-- Should the median of the main grid be displayed ? -->
            <!-- Values are No ___ the median of the main grid will not be displayed -->
            <!--            Yes __ the median of the main grid display will be diaplyed (** default **) -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridSetLineType" minval="1" maxval="63">
            <!-- The linetype index to use for Grid Set representation -->
            <!-- Default value is 1 (solid linetype) -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="TickSize">
            <!-- The size of the ticks in millimeters -->
            <!-- Default value is 2.0 millimeters -->
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="AnnotationStyle" minval="0" maxval="3">
            <!-- Style of the annotation of the frames -->
            <!-- Values are 0 ____ no annotation  -->
            <!--            1 ____ frames names (** default **) -->
            <!--            2 ____ offset from the origin with the units -->
            <!--            3 ____ offset from the origin without the units -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="AnnotationSize">
            <!-- Size of the annotations -->
            <!-- Default value is 2.0 millimeters -->
            <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
            <std:floatval>2.0</std:floatval>
          </std:node>
          <std:node name="AnnotationFrame">
            <!-- Type of Annotation Frame for the applied annotation -->
            <!-- Default value is "None" -->
            <std:enumval name="drafttextframe">None</std:enumval>
          </std:node>
          <std:node name="AnnotationStep" minval="1">
            <!-- Step between 2 annotations -->
            <!-- Default value is 1 (means you have an annotation on each stick) -->
            <std:intval>3</std:intval>
          </std:node>
          <std:node name="AnnotationStart">
            <!-- The first annotation position-->
            <!-- Default value is -100 to display all frames in within th ebounding box -->
            <std:intval>-100</std:intval>
          </std:node>
          <std:node name="Elevations">
            <std:node name="Draw">
              <!-- Should it draw the orientation symbol ? -->
              <!-- Values are No ___ no orientation will be drawn -->
              <!--            Yes __ the orientation will be drawn (** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="ZPlusOrient_Symbol">
              <!-- The letter used for ZPlusOrient orientation -->
              <!-- Default value is "U" -->
              <std:strval>U</std:strval>
            </std:node>
            <std:node name="ZMinOrientName_Symbol">
              <!-- The letter used for ZMinOrientName orientation -->
              <!-- Default value is "L" -->
              <std:strval>L</std:strval>
            </std:node>
            <std:node name="XPlusOrientName_Symbol">
              <!-- The letter used for XPlusOrientName orientation -->
              <!-- Default value is "A" -->
              <std:strval>A</std:strval>
            </std:node>
            <std:node name="XMinOrientName_Symbol">
              <!-- The letter used for XMinOrientName orientation -->
              <!-- Default value is "F" -->
              <std:strval>F</std:strval>
            </std:node>
            <std:node name="YPlusOrientName_Symbol">
              <!-- The letter used for YPlusOrientName orientation -->
              <!-- Default value is "S" -->
              <std:strval>S</std:strval>
            </std:node>
            <std:node name="YMinOrientName_Symbol">
              <!-- The letter used for YMinOrientName orientation -->
              <!-- Default value is "P" -->
              <std:strval>P</std:strval>
            </std:node>
            <std:node name="HullInOrientName_Symbol">
              <!-- The letter used for HullInOrientName orientation -->
              <!-- Default value is "I" -->
              <std:strval>I</std:strval>
            </std:node>
            <std:node name="HullOutOrientName_Symbol">
              <!-- The letter used for outboard orientation -->
              <!-- Default value is "O" -->
              <std:strval>O</std:strval>
            </std:node>
            <std:node name="FontSize">
              <!-- The size of the piece part number text -->
              <!-- Default is 2.0 -->
              <std:floatval>1.5</std:floatval>
            </std:node>
            <!-- end YGRID Elevations-->
          </std:node>
          <std:node name="StandardFrame">
            <!-- Specification for the display of type = Standard frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the Standard frames ? -->
              <!-- Values are No ___ no standard frameswill be drawn -->
              <!--            Yes __ standard frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Standard frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>5</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>2</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>1.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!--end YGRID StandardFrame-->
          </std:node>
          <std:node name="WebFrame">
            <!-- Specification for the display of type = Web frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the Web frames ? -->
              <!-- Values are No ___ no web frames will be drawn -->
              <!--            Yes __ web frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>10</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Above</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>3.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!-- end YGRID WebFrame-->
          </std:node>
          <std:node name="SpecialFrame">
            <!-- Specification for the display of type = Special frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the SpecialWeb frames ? -->
              <!-- Values are No ___ no special frames will be drawn -->
              <!--            Yes __ special frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>15</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">AboveTheLine</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Above</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!-- end YGRID SpecialFrame-->
          </std:node>
          <std:node name="AFT">
            <!-- Specification for the display of category = AFT frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the AFT frames ? -->
              <!-- Values are No ___ no AFT frames will be drawn -->
              <!--            Yes __ AFT frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!-- end YGRID AFT-->
          </std:node>
          <std:node name="MFZ">
            <!-- Specification for the display of category = MFT frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the MFZ frames ? -->
              <!-- Values are No ___ no MFX frames will be drawn -->
              <!--            Yes __ MFX frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!-- end YGRID MFZ-->
          </std:node>
          <!-- end YGRID MAINGRID-->
        </std:node>
        <std:node name="SpacingGrid">
          <!-- Specification for the spacing grid display -->
          <std:node name="SpacingGridStyle">
            <!-- Which style of the spacing grid should be displayed? -->
            <!-- Values are Distance(** default **) -->
            <!--            Space -->
            <std:enumval name="framespacingtype">Space</std:enumval>
          </std:node>
          <std:node name="ShowSpacingGrid">
            <!-- Should it draw the spacing grid ? -->
            <!-- Values are No ___ no spacing grid will be drawn -->
            <!--            Yes __ spacing grid will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="RestrictedToTheBoundingBox">
            <!-- Should the spacing grid be restricted to the generated object(s) bounding box -->
            <!-- Values are No ___ the spacing grid systems line will be drawn (except in case of clipping) (** default **) -->
            <!--            Yes __ the spacing grid will be restricted -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridsetPosition" minval="0" maxval="1">
            <!-- Positionnement of the reference plane systems according to the generated view -->
            <!-- Values are 0 ____ the reference plane systems are generated where the set of planes is located (** default **) -->
            <!--            1 ____ the reference plane systems are specified -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="GridSetSelection">
            <!-- Specify where the grids shoule be placed ? -->
            <std:node name="GridLeft">
              <!-- Should it draw the spacing grid on the left side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the left side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the left side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridRight">
              <!-- Should it draw the spacing grid on the right side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the right side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the right side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridTop">
              <!-- Should it draw the reference plane system on the top side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the top side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the top side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridBottom">
              <!-- Should it draw the spacing grid on the bottom side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the bottom side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the bottom side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Offset1">
            <!-- The offset to add between the generated view and the median in millimeters -->
            <!-- Default value is 20.0 millimeters -->
            <std:floatval>45</std:floatval>
          </std:node>
          <std:node name="Offset2">
            <!-- The offset to add between the generated view and the 2nd median in millimeters -->
            <!-- Default value is 30.0 millimeters -->
            <std:floatval>0</std:floatval>
          </std:node>
          <std:node name="TickSize">
            <!-- The size of the ticks in millimeters -->
            <!-- Default value is 2.0 millimeters -->
            <std:floatval>20</std:floatval>
          </std:node>
          <std:node name="AnnotationSize">
            <!-- Size of the annotations -->
            <!-- Default value is 2.0 millimeters -->
            <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
            <std:floatval>2.0</std:floatval>
          </std:node>
          <std:node name="TextPosition">
            <!-- The position of the text relative to the graduation -->
            <!-- Default value is below-->
            <std:enumval name="frametextposition">Below</std:enumval>
          </std:node>
          <std:node name="MidshipsSymbolDisplay">
            <!-- Should it draw the midships symbol ? -->
            <!-- Values are No ___ no midships symbol will be drawn (** default **) -->
            <!--            Yes __ midships symbol will be drawn depending on the next settings -->
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="MidshipsSymbolChapterName">
            <!-- The name of the chapter containing midships symbol within the Drawing Symbol Structure Catalog (refer to PRM file) -->
            <!-- Default value is "MTOs" -->
            <std:strval>Structure</std:strval>
          </std:node>
          <std:node name="MidshipsDetailName">
            <!-- The name of the detail within the catalog to instanciate for Midships Detail Name -->
            <!-- Default value is "MidShip" -->
            <std:strval>MidShip</std:strval>
          </std:node>
          <!--end YGRID SpacingGrid-->
        </std:node>
        <!--end YGRID-->
      </std:node>
      <std:node name="ZGRID">
        <!-- Specification for the Z grid display -->
        <std:node name="Draw">
          <!-- Should it draw the Z grid? -->
          <!-- Values are No ____ the Z grid will not be extracted -->
          <!--            Yes ___ the Z grid will be extracted (** default **) -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="MainGrid">
          <!-- Specification for the main grid display -->
          <std:node name="Draw">
            <!-- Should it draw the reference plane system ? -->
            <!-- Values are No ___ no reference plane system will be drawn (** default **) -->
            <!--            Yes __ reference plane systems will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="RestrictedToTheBoundingBox">
            <!-- Should the reference plane systems be restricted to the generated object(s) bounding box -->
            <!-- Values are No ___ the entire reference plane systems line will be drawn (except in case of clipping) (** default **) -->
            <!--            Yes __ the reference plane systems will be restricted -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridsetPosition" minval="0" maxval="1">
            <!-- Positionnement of the reference plane systems according to the generated view -->
            <!-- Values are 0 ____ the reference plane systems are generated where the set of planes is located (** default **) -->
            <!--            1 ____ the reference plane systems are specified -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="GridSetSelection">
            <!-- Specify where the grids shoule be placed ? -->
            <std:node name="GridLeft">
              <!-- Should it draw the reference plane system on the left side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the left side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the left side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridRight">
              <!-- Should it draw the reference plane system on the right side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the right side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the right side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridTop">
              <!-- Should it draw the reference plane system on the top side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the top side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the top side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridBottom">
              <!-- Should it draw the reference plane system on the bottom side of the model ? -->
              <!-- Values are No ___ no reference plane system will be drawn on the bottom side of the model (** default **) -->
              <!--            Yes __ reference plane systems will be drawn on the bottom side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <!--end ZGRID GridSetSelection-->
          </std:node>
          <std:node name="Offset">
            <!-- The horizontal offset to add between the generated view and the vertical reference plane system in millimeters -->
            <!-- Default value is 35.0 millimeters -->
            <std:floatval>35</std:floatval>
          </std:node>
          <std:node name="ShowMedian">
            <!-- Should the median of the main grid be displayed ? -->
            <!-- Values are No ___ the median of the main grid will not be displayed -->
            <!--            Yes __ the median of the main grid display will be diaplyed (** default **) -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridSetLineType" minval="1" maxval="63">
            <!-- The linetype index to use for Grid Set representation -->
            <!-- Default value is 1 (solid linetype) -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="TickSize">
            <!-- The size of the ticks in millimeters -->
            <!-- Default value is 2.0 millimeters -->
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="AnnotationStyle" minval="0" maxval="3">
            <!-- Style of the annotation of the frames -->
            <!-- Values are 0 ____ no annotation  -->
            <!--            1 ____ frames names (** default **) -->
            <!--            2 ____ offset from the origin with the units -->
            <!--            3 ____ offset from the origin without the units -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="AnnotationSize">
            <!-- Size of the annotations -->
            <!-- Default value is 2.0 millimeters -->
            <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
            <std:floatval>2.0</std:floatval>
          </std:node>
          <std:node name="AnnotationFrame">
            <!-- Type of Annotation Frame for the applied annotation -->
            <!-- Default value is "None" -->
            <std:enumval name="drafttextframe">None</std:enumval>
          </std:node>
          <std:node name="AnnotationStep" minval="1">
            <!-- Step between 2 annotations -->
            <!-- Default value is 1 (means you have an annotation on each stick) -->
            <std:intval>3</std:intval>
          </std:node>
          <std:node name="AnnotationStart">
            <!-- The first annotation position-->
            <!-- Default value is -100 to display all frames in within th ebounding box -->
            <std:intval>-100</std:intval>
          </std:node>
          <std:node name="Elevations">
            <std:node name="Draw">
              <!-- Should it draw the orientation symbol ? -->
              <!-- Values are No ___ no orientation will be drawn -->
              <!--            Yes __ the orientation will be drawn (** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="ZPlusOrient_Symbol">
              <!-- The letter used for ZPlusOrient orientation -->
              <!-- Default value is "U" -->
              <std:strval>U</std:strval>
            </std:node>
            <std:node name="ZMinOrientName_Symbol">
              <!-- The letter used for ZMinOrientName orientation -->
              <!-- Default value is "L" -->
              <std:strval>L</std:strval>
            </std:node>
            <std:node name="XPlusOrientName_Symbol">
              <!-- The letter used for XPlusOrientName orientation -->
              <!-- Default value is "A" -->
              <std:strval>A</std:strval>
            </std:node>
            <std:node name="XMinOrientName_Symbol">
              <!-- The letter used for XMinOrientName orientation -->
              <!-- Default value is "F" -->
              <std:strval>F</std:strval>
            </std:node>
            <std:node name="YPlusOrientName_Symbol">
              <!-- The letter used for YPlusOrientName orientation -->
              <!-- Default value is "S" -->
              <std:strval>S</std:strval>
            </std:node>
            <std:node name="YMinOrientName_Symbol">
              <!-- The letter used for YMinOrientName orientation -->
              <!-- Default value is "P" -->
              <std:strval>P</std:strval>
            </std:node>
            <std:node name="HullInOrientName_Symbol">
              <!-- The letter used for HullInOrientName orientation -->
              <!-- Default value is "I" -->
              <std:strval>I</std:strval>
            </std:node>
            <std:node name="HullOutOrientName_Symbol">
              <!-- The letter used for outboard orientation -->
              <!-- Default value is "O" -->
              <std:strval>O</std:strval>
            </std:node>
            <std:node name="FontSize">
              <!-- The size of the piece part number text -->
              <!-- Default is 2.0 -->
              <std:floatval>1.5</std:floatval>
            </std:node>
            <!--end ZGRID Elevations-->
          </std:node>
          <std:node name="StandardFrame">
            <!-- Specification for the display of type = Standard frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the Standard frames ? -->
              <!-- Values are No ___ no standard frameswill be drawn -->
              <!--            Yes __ standard frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Standard frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>3</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>10</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">Rectangle</std:enumval>
            </std:node>
            <!--end ZGRID StandardFrame-->
          </std:node>
          <std:node name="WebFrame">
            <!-- Specification for the display of type = Web frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the Web frames ? -->
              <!-- Values are No ___ no web frames will be drawn -->
              <!--            Yes __ web frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!--end ZGRID WebFrame-->
          </std:node>
          <std:node name="SpecialFrame">
            <!-- Specification for the display of type = Special frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the SpecialWeb frames ? -->
              <!-- Values are No ___ no special frames will be drawn -->
              <!--            Yes __ special frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!--end ZGRID SpecialFrame-->
          </std:node>
          <std:node name="AFT">
            <!-- Specification for the display of category = AFT frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the AFT frames ? -->
              <!-- Values are No ___ no AFT frames will be drawn -->
              <!--            Yes __ AFT frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!--end ZGRID AFT-->
          </std:node>
          <std:node name="MFZ">
            <!-- Specification for the display of category = MFT frames in the plane XML -->
            <std:node name="Draw">
              <!-- Should it draw the MFZ frames ? -->
              <!-- Values are No ___ no MFX frames will be drawn -->
              <!--            Yes __ MFX frames will be drawn ( ** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!-- The linetype index to use for Web frame graduation -->
              <!-- Default value is 1 (solid linetype) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TickSize">
              <!-- The size of the ticks in millimeters -->
              <!-- Default value is 2.0 millimeters -->
              <std:floatval>60</std:floatval>
            </std:node>
            <std:node name="Position">
              <!-- The position of the gradition relative to the median -->
              <!-- Default value is Centered-->
              <std:enumval name="framelineposition">Centered</std:enumval>
            </std:node>
            <std:node name="AnnotationStyle" minval="0" maxval="3">
              <!-- Style of the annotation of the frames -->
              <!-- Values are 0 ____ no annotation  -->
              <!--            1 ____ frames name (** default **) -->
              <!--            2 ____ short name -->
              <!--            3 ____ offset from the origin with the units -->
              <!--            4 ____ offset from the origin without the units -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="TextPosition">
              <!-- The position of the text relative to the graduation -->
              <!-- Default value is below-->
              <std:enumval name="frametextposition">Below</std:enumval>
            </std:node>
            <std:node name="AnnotationSize">
              <!-- Size of the annotations -->
              <!-- Default value is 2.0 millimeters -->
              <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
              <std:floatval>2.0</std:floatval>
            </std:node>
            <std:node name="AnnotationFrame">
              <!-- Type of Annotation Frame for the applied annotation -->
              <!-- Default value is "None" -->
              <std:enumval name="drafttextframe">None</std:enumval>
            </std:node>
            <!--end ZGrid MFZ-->
          </std:node>
          <!--end ZGrid MainGrid-->
        </std:node>
        <std:node name="SpacingGrid">
          <!-- Specification for the spacing grid display -->
          <std:node name="SpacingGridStyle">
            <!-- Which style of the spacing grid should be displayed? -->
            <!-- Values are Distance(** default **) -->
            <!--            Space -->
            <std:enumval name="framespacingtype">Distance</std:enumval>
          </std:node>
          <std:node name="ShowSpacingGrid">
            <!-- Should it draw the spacing grid ? -->
            <!-- Values are No ___ no spacing grid will be drawn -->
            <!--            Yes __ spacing grid will be drawn depending on the next settings -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="RestrictedToTheBoundingBox">
            <!-- Should the spacing grid be restricted to the generated object(s) bounding box -->
            <!-- Values are No ___ the spacing grid systems line will be drawn (except in case of clipping) (** default **) -->
            <!--            Yes __ the spacing grid will be restricted -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GridsetPosition" minval="0" maxval="1">
            <!-- Positionnement of the reference plane systems according to the generated view -->
            <!-- Values are 0 ____ the reference plane systems are generated where the set of planes is located (** default **) -->
            <!--            1 ____ the reference plane systems are specified -->
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="GridSetSelection">
            <!-- Specify where the grids shoule be placed ? -->
            <std:node name="GridLeft">
              <!-- Should it draw the spacing grid on the left side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the left side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the left side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
            <std:node name="GridRight">
              <!-- Should it draw the spacing grid on the right side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the right side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the right side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridTop">
              <!-- Should it draw the reference plane system on the top side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the top side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the top side of the model -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="GridBottom">
              <!-- Should it draw the spacing grid on the bottom side of the model ? -->
              <!-- Values are No ___ no spacing grid will be drawn on the bottom side of the model (** default **) -->
              <!--            Yes __ spacing grid will be drawn on the bottom side of the model -->
              <std:enumval name="YesNo">No</std:enumval>
            </std:node>
          </std:node>
          <std:node name="Offset1">
            <!-- The offset to add between the generated view and the median in millimeters -->
            <!-- Default value is 20.0 millimeters -->
            <std:floatval>20</std:floatval>
          </std:node>
          <std:node name="Offset2">
            <!-- The offset to add between the generated view and the 2nd median in millimeters -->
            <!-- Default value is 30.0 millimeters -->
            <std:floatval>30</std:floatval>
          </std:node>
          <std:node name="TickSize">
            <!-- The size of the ticks in millimeters -->
            <!-- Default value is 2.0 millimeters -->
            <std:floatval>60</std:floatval>
          </std:node>
          <std:node name="AnnotationSize">
            <!-- Size of the annotations -->
            <!-- Default value is 2.0 millimeters -->
            <!-- Model unit must be millimeter for length params (else, set the size to 0.2 if your param is centimeter) -->
            <std:floatval>2.0</std:floatval>
          </std:node>
          <std:node name="TextPosition">
            <!-- The position of the text relative to the graduation -->
            <!-- Default value is below-->
            <std:enumval name="frametextposition">Above</std:enumval>
          </std:node>
          <std:node name="MidshipsSymbolDisplay">
            <!-- Should it draw the midships symbol ? -->
            <!-- Values are No ___ no midships symbol will be drawn (** default **) -->
            <!--            Yes __ midships symbol will be drawn depending on the next settings -->
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="MidshipsSymbolChapterName">
            <!-- The name of the chapter containing midships symbol within the Drawing Symbol Structure Catalog (refer to PRM file) -->
            <!-- Default value is "MTOs" -->
            <std:strval>Structure</std:strval>
          </std:node>
          <std:node name="MidshipsDetailName">
            <!-- The name of the detail within the catalog to instanciate for Midships Detail Name -->
            <!-- Default value is "MidShip" -->
            <std:strval>MidShip</std:strval>
          </std:node>
          <!-- ZGRID SpacingGrid-->
        </std:node>
        <!--end ZGRID-->
      </std:node>
      <!--end ReferencePlaneSystem-->
    </std:node>
    <std:node name="StructureObjects">
      <std:node name="Stiffener">
        <!-- STIFFENER -->
        <std:node name="Draw">
          <!-- Should it draw the stiffener ? -->
          <!-- Values are No ____ the stiffener will not be extracted -->
          <!--            Yes ___ the stiffener will be extracted (with or without GR - see "GraphicReplacement" setting) (** default **) -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="GraphicReplacement">
          <!-- Should it use the graphic replacement ? -->
          <!-- Values are No ____ no graphic replacement will be used -->
          <!--            Yes ___ graphic replacement will be used (** default **)-->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="AngularTolerance">
          <!-- Angular tolerance for to trigger this type of View in degrees -->
          <!-- Default value is 15.0  -->
          <std:floatval>15.0</std:floatval>
        </std:node>
        <std:node name="ViewType">
          <std:node name="TopView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side stiffeners ? -->
                <!-- Values are No ____ near side stiffener will not be drawn -->
                <!--            Yes ___ near side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side stiffener representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--End NearSide-->
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side stiffeners ? -->
                <!-- Values are No ____ far side stiffener will not be drawn  -->
                <!--            Yes ___ far side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side stiffener representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--End FarSide-->
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Requests (ATS_Attribute thru ATS_40 available)    * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_stiff_name</std:strval>
              </std:node>
            </std:node>
            <std:node name="FlangeOrientationSymbol">
            <!-- The FlangeOrientation Section will be under the TopView section of the Stiffener in R18 -->
              <std:node name="Draw">
                <!-- Should it draw arrowheads at ends of stiffener ? -->
                <!-- Values are No ____ no symbols representing the stiffener ends will be drawn (** default **) -->
                <!--            Yes ___ symbols representing stiffener end will be used (see "EndSymbolDetailName" setting) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="ChapterName">
                <!-- The name of the chapter containing FlangeOrientation symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                <!-- Default value is "FlangeOrientation" -->
                <std:strval>FlangeOrientations</std:strval>
              </std:node>
              <std:node name="SymbolName">
                <!-- The name of the detail within the catalog to instanciate for FlangeOrientation -->
                <!-- Default value is "Default_FlangeOrientation_Symbol" -->
                <std:strval>Default_FlangeOrientation_Symbol</std:strval>
              </std:node>
              <std:node name="ReferenceScale">
                <!-- The scale to set the Flange Orientation Detail to -->
                <!-- Default value is 1.0  -->
                <std:floatval>1.0</std:floatval>
              </std:node>
              <std:node name="SymbolLocation">
                <std:enumval name="ProfileLocation">Middle</std:enumval>
              </std:node>
            <!--End FlangeOrientation-->
            </std:node>
			      <std:node name="ExtremitySymbol">
              <std:node name="Draw">
                <!-- Should it draw arrowheads at ends of stiffener ? -->
                <!-- Values are No ____ no symbols representing the stiffener ends will be drawn (** default **) -->
                <!--            Yes ___ symbols representing stiffener end will be used (see "EndSymbolDetailName" setting) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="MinimumLengthRatio">
                <!-- Minimum length of stiffener at which the end symbol will be displayed -->
                <!-- Value is between 0 and 1.                                             -->
                <!-- A Value of 0 will result in no end symbol being placed, while a value -->
                <!-- of 1 will result in a display if the end symbol is smaller than the   -->
                <!-- length of the stiffener.  Default is .45                              -->
                <std:floatval>.45</std:floatval>
              </std:node>
              <std:node name="ReferenceScale">
                <!-- The scale to set the End Symbol Detail to -->
                <!-- Default value is 1.0  -->
                <std:floatval>1.0</std:floatval>
              </std:node>
              <std:node name="ChapterName">
                <!-- The name of the chapter containing end symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                <!-- Default value is "Ends" -->
                <std:strval>Ends</std:strval>
              </std:node>
              <std:node name="DefaultExtremitySymbol">
				        <std:node name="SymbolName">
					        <!-- The name of the detail within the catalog to instanciate for ends of stiffener -->
					        <!-- Default value is "BlackFilledArrow_3x1.5" -->
					        <std:strval>BlackFilledArrow_3x1.5</std:strval>
				        </std:node>
              </std:node>
				      <std:node name="ExtremitySymbolByEndCutType">
                <std:node name="Draw">
                  <!-- Should the Stiffener end symbol be dependant on the end cut type ? -->
                  <!-- Values are No ____ the SymbolsAtEndsOfProfile option will always be used (** default **) -->
                  <!--            Yes ___ symbols will be chosen in following settings according to EndCut type -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
				        <std:node name="Snipe">
				          <std:strval>NotFilledArrow_3x1.5</std:strval>
				        </std:node>
				        <std:node name="Weld">
				          <std:strval>HalfArrow_3x1.5</std:strval>
				        </std:node>
				        <std:node name="Trim">
				          <std:strval>T-A49XH</std:strval>
                </std:node>
              </std:node>
			      </std:node>
            <std:node name="MaterialExtrusionSymbol">
              <std:node name="Draw">
                <!-- Should it draw Material Extrusion Symbol? -->
                <!-- Values are No ____ Material Extrusion Symbol will not be drawn (** default **)-->
                <!--            Yes ___ Material Extrusion Symbol will be drawn  -->
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="MaterialExtrusionMode">
                <!-- Values are 'Tick mark (true width)' __________ draw only the Tick Mark (see the TM_OffsetFromEndOfMember, and TM_Length settings) -->
                <!--            'Throw orientation (symbolic)' ____ draw only the Material Throw Orientation (see the MTO_DetailName setting) -->
                <!--            'Tick mark and throw orientation'__ draw both the Material Throw Orientation and the Tick Mark -->
                <std:enumval name="MaterialExtrusion">Throw orientation (symbolic)</std:enumval>
              </std:node>
              <std:node name="SymbolLocation">
                <std:enumval name="ProfileLocation">Start</std:enumval>
              </std:node>
              <std:node name="MaterialThroughOrientationSymbol">
                <std:node name="ChapterName">
                  <!-- The name of the chapter containing MTO symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                  <!-- Default value is "MTOs" -->
                  <std:strval>MTOs</std:strval>
                </std:node>
                <std:node name="SymbolName">
                  <!-- The name of the detail within the catalog to instanciate for Material Throw Orientation -->
                  <!-- Default value is "BlackFilledRectangle_5x1" -->
                  <!-- Important: this setting is used only when the MaterialThrowOrientation setting is set to 1 or 3 -->
                  <std:strval>BlackFilledRectangle_5x1_CTR</std:strval>
                </std:node>
                <std:node name="ReferenceScale">
                  <!-- The scale to set the Flange Orientation Detail to -->
                  <!-- Default value is 1.0  -->
                  <std:floatval>1.0</std:floatval>
                </std:node>
              </std:node>
              <std:node name="TickMarkSymbol">
                <std:node name="Length">
                  <!-- The Tick Mark length -->
                  <!-- Default value is 5.0 millimeters -->
                  <std:floatval>5.0</std:floatval>
                </std:node>
              </std:node>  
            </std:node>
          </std:node>  
          <std:node name="SideView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side stiffeners ? -->
                <!-- Values are No ____ near side stiffener will not be drawn -->
                <!--            Yes ___ near side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side stiffener representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side stiffeners ? -->
                <!-- Values are No ____ far side stiffener will not be drawn -->
                <!--            Yes ___ far side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side stiffener representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Requests (ATS_Attribute thru ATS_40 available)    * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_stiff_name</std:strval>
              </std:node>
            </std:node>
            <std:node name="ExtremitySymbol">
              <std:node name="Draw">
                <!-- Should it draw arrowheads at ends of stiffener ? -->
                <!-- Values are No ____ no symbols representing the stiffener ends will be drawn (** default **) -->
                <!--            Yes ___ symbols representing stiffener end will be used (see "EndSymbolDetailName" setting) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="MinimumLengthRatio">
                <!-- Minimum length of stiffener at which the end symbol will be displayed -->
                <!-- Value is between 0 and 1.                                             -->
                <!-- A Value of 0 will result in no end symbol being placed, while a value -->
                <!-- of 1 will result in a display if the end symbol is smaller than the   -->
                <!-- length of the stiffener.  Default is .45                              -->
                <std:floatval>.45</std:floatval>
              </std:node>
              <std:node name="ReferenceScale">
                <!-- The scale to set the Flange Orientation Detail to -->
                <!-- Default value is 1.0  -->
                <std:floatval>1.0</std:floatval>
              </std:node>
              <std:node name="ChapterName">
                <!-- The name of the chapter containing end symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                <!-- Default value is "Ends" -->
                <std:strval>Ends</std:strval>
              </std:node>
              <std:node name="ExtremitySymbolByEndCutType">
  			        <std:node name="Snipe">
	  		          <std:strval>ec_45_degree</std:strval>
		  	        </std:node>
			          <std:node name="Weld">
			            <std:strval>ec_60_degree</std:strval>
			          </std:node>
			          <std:node name="Trim">
			           <std:strval>ec_45_degree_dbl</std:strval>
                </std:node>
              </std:node>
            </std:node>              
            <std:node name="SlotSymbol">
              <std:node name="Draw">
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="ReferenceScale">
                <!-- The scale to set the Slot Symbol Detail to -->
                <!-- Default value is 100.0  -->
                <std:floatval>100.0</std:floatval>
              </std:node>
              <std:node name="ChapterName">
                <std:strval>Slots</std:strval>
              </std:node>
              <std:node name="SlotSymbolBySlotType">
                <std:node name="Tee_Slot_thru_Plate">
                  <std:strval>slot_1</std:strval>
                </std:node>
                <std:node name="Tee_Slot_thru_Shape">
                  <std:strval>slot_2</std:strval>
                </std:node>
                <std:node name="Welded_Slot_for_Tee">
                  <std:strval>slot_3</std:strval>
                </std:node>
                <std:node name="CC-10">
                  <std:strval>slot_4</std:strval>
                </std:node>
                <std:node name="CC-10-2Tee_thru_Shape">
                  <std:strval>slot_5</std:strval>
                </std:node>
                <std:node name="Smart_Param_CC-10">
                  <std:strval>slot_6</std:strval>
                </std:node>
              </std:node>
            </std:node>
            <!--fin du noeud SideView-->
          </std:node>
          <std:node name="EndView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side stiffeners ? -->
                <!-- Values are No ____ near side stiffener will not be drawn -->
                <!--            Yes ___ near side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side stiffener representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side stiffeners ? -->
                <!-- Values are No ____ far side stiffener will not be drawn -->
                <!--            Yes ___ far side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side stiffener representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noed FarSide-->
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Requests (ATS_Attribute thru ATS_40 available)    * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_stiff_name</std:strval>
              </std:node>
            </std:node>
            <!--fin du noeud EndView-->
          </std:node>
          <std:node name="AnyView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side stiffeners ? -->
                <!-- Values are No ____ near side stiffener will not be drawn -->
                <!--            Yes ___ near side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side stiffener representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side stiffeners ? -->
                <!-- Values are No ____ far side stiffener will not be drawn -->
                <!--            Yes ___ far side stiffener will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side stiffener representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noed FarSide-->
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Requests (ATS_Attribute thru ATS_40 available)    * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_stiff_name</std:strval>
              </std:node>
            </std:node>
            <!--fin du noeud AnyView-->
          </std:node>
          <!--end ViewType node-->
        </std:node>

        <!-- Stiffener on Free Edge -->
        <std:node name="Stiffener on Free Edge" >
          <std:node name="ViewType">
            <std:node name="TopView">
              <std:node name="AnnotationTextStyle">
                <std:node name="Draw">
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- ********* "Yes" causes inclusion of a leader -->
                <std:node name="ATS_AutoPosition">
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
                <!-- ********* Non zero values cause inclusion of a leader -->
                <std:node name="ATS_CharacterOffset">
                  <std:intval>0</std:intval>
                </std:node>
                <!-- ********* ATS Requests (ATS_Attribute thru ATS_40 available)    * -->
                <std:node name="ATS_Attribute">
                  <std:strval>sfm_stiffofe_name</std:strval>
                </std:node>
              </std:node>
              <std:node name="FlangeOrientationSymbol">
                <!-- The FlangeOrientation Section will be under the TopView section of the Stiffener in R18 -->
                <std:node name="Draw">
                  <!-- Should it draw arrowheads at ends of stiffener ? -->
                  <!-- Values are No ____ no symbols representing the stiffener ends will be drawn (** default **) -->
                  <!--            Yes ___ symbols representing stiffener end will be used (see "EndSymbolDetailName" setting) -->
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
                <!--End FlangeOrientation-->
              </std:node>
              <std:node name="ExtremitySymbol">
                <std:node name="Draw">
                  <!-- Should it draw arrowheads at ends of stiffener ? -->
                  <!-- Values are No ____ no symbols representing the stiffener ends will be drawn (** default **) -->
                  <!--            Yes ___ symbols representing stiffener end will be used (see "EndSymbolDetailName" setting) -->
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
              </std:node>
              <std:node name="MaterialExtrusionSymbol">
                <std:node name="Draw">
                  <!-- Should it draw Material Extrusion Symbol? -->
                  <!-- Values are No ____ Material Extrusion Symbol will not be drawn (** default **)-->
                  <!--            Yes ___ Material Extrusion Symbol will be drawn  -->
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="SideView">
              <std:node name="AnnotationTextStyle">
                <std:node name="Draw">
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
              </std:node>
              <std:node name="ExtremitySymbol">
                <std:node name="Draw">
                  <!-- Should it draw arrowheads at ends of stiffener ? -->
                  <!-- Values are No ____ no symbols representing the stiffener ends will be drawn (** default **) -->
                  <!--            Yes ___ symbols representing stiffener end will be used (see "EndSymbolDetailName" setting) -->
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
              </std:node>
              <!--fin du noeud SideView-->
            </std:node>
            <std:node name="EndView">
              <std:node name="AnnotationTextStyle">
                <std:node name="Draw">
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
              </std:node>
              <!--fin du noeud EndView-->
            </std:node>
            <std:node name="AnyView">
              <std:node name="AnnotationTextStyle">
                <std:node name="Draw">
                  <std:enumval name="YesNo">No</std:enumval>
                </std:node>
              </std:node>
              <!--fin du noeud AnyView-->
            </std:node>
            <!--end ViewType node-->
          </std:node>
        </std:node>

      </std:node>
      <!-- ********************************************************************************************* -->
      <std:node name="Beam">
        <!-- Pillar -->
        <std:node name="Draw">
          <!-- Should it draw the Beam? -->
          <!-- Values are No ____ the Beam will not be extracted -->
          <!--            Yes ___ the Beam will be extracted (with or without GR - see "GraphicReplacement" setting) (** default **) -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="GraphicReplacement">
          <!-- Should it use the graphic replacement ? -->
          <!-- Values are No ____ no graphic replacement will be used (** default **) -->
          <!--            Yes ___ graphic replacement will be used -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="AngularTolerance">
          <!-- Angular tolerance for to trigger this type of View in degrees -->
          <!-- Default value is 15.0  -->
          <std:floatval>15.0</std:floatval>
        </std:node>
        <std:node name="ViewType">
          <std:node name="EndView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side beams ? -->
                <!-- Values are No ____ near side Pillar will not be drawn -->
                <!--            Yes ___ near side Pillar will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Pillar representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side Pillar ? -->
                <!-- Values are No ____ far side Pillar will not be drawn (** default **) -->
                <!--            Yes ___ far side Pillar will be drawn -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side Pillar representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <!--fin du noed EndView-->
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>ToBeDefined</std:strval>
              </std:node>
            </std:node>
          </std:node>
          <std:node name="SideView">
            <std:node name="3DParameters">
              <std:node name="SingleLine">
                <std:node name="Draw">
                  <!-- Should it draw the SingleLine ? -->
                  <!-- Values are No ____ the Trace of the Beam will not be extracted -->
                  <!--            Yes ___ the Trace of the Beam will be extracted (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <std:node name="ShrinkMode">
                  <!-- What measurement mode should be applied while shrinking the Single Line ? -->
                  <!-- Values are Relative ____ a value between 0 and 1 is required. No magnitude needed. -->
                  <!-- Values are Absolute ____ the value must include a magniture or the model default (mm) is applied. -->
                  <std:enumval name="DistanceMode">Absolute</std:enumval>
                </std:node>
                <std:node name="ShrinkValue">
                  <std:strval>10mm</std:strval>
                </std:node>
              </std:node>
              <std:node name="DoubleLine">
                <std:node name="Draw">
                  <!-- Should it draw the DoubleLine ? -->
                  <!-- Values are No ____ the 3DBeam will not be extracted -->
                  <!--            Yes ___ the 3DBeam will be extracted (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <std:node name="ShrinkMode">
                  <!-- What measurement mode should be applied while shrinking the DoubleLine ? -->
                  <!-- Values are Relative ____ a value between 0 and 1 is required. No magnitude needed. -->
                  <!-- Values are Absolute ____ the value must include a magniture or the model default (mm) is applied. -->
                  <std:enumval name="DistanceMode">Relative</std:enumval>
                </std:node>
                <std:node name="ShrinkValue">
                  <std:strval>0.5</std:strval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side beams ? -->
                <!-- Values are No ____ near side Pillar will not be drawn -->
                <!--            Yes ___ near side Pillar will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Pillar representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side beams ? -->
                <!-- Values are No ____ far side Pillar will not be drawn  -->
                <!--            Yes ___ far side Pillar will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side beam representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>ToBeDefined</std:strval>
              </std:node>
            </std:node>
            <std:node name="SingleLine">
              <std:node name="ExtremitySymbol">
                <std:node name="Draw">
                  <!-- Should it draw arrowheads at ends of Beam ? -->
                  <!-- Values are No ____ no symbols representing the Beam ends will be drawn (** default **) -->
                  <!--            Yes ___ symbols representing Beam end will be used (see "EndSymbolDetailName" setting) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <std:node name="MinimumLengthRatio">
                  <!-- Minimum length of Beam at which the end symbol will be displayed -->
                  <!-- Value is between 0 and 1.                                             -->
                  <!-- A Value of 0 will result in no end symbol being placed, while a value -->
                  <!-- of 1 will result in a display if the end symbol is smaller than the   -->
                  <!-- length of the Beam.  Default is .45                              -->
                  <std:floatval>.45</std:floatval>
                </std:node>
                <std:node name="ReferenceScale">
                  <!-- The scale to set the End Symbol Detail to -->
                  <!-- Default value is 1.0  -->
                  <std:floatval>1.0</std:floatval>
                </std:node>
                <std:node name="ChapterName">
                  <!-- The name of the chapter containing end symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                  <!-- Default value is "Ends" -->
                  <std:strval>Ends</std:strval>
                </std:node>
                <std:node name="DefaultExtremitySymbol">
                  <std:node name="SymbolName">
                    <!-- The name of the detail within the catalog to instanciate for ends of Beam -->
                    <!-- Default value is "BlackFilledArrow_3x1.5" -->
                    <std:strval>BlackFilledArrow_3x1.5</std:strval>
                  </std:node>
                </std:node>
                <std:node name="ExtremitySymbolByEndCutType">
                  <std:node name="Draw">
                    <!-- Should the Beam end symbol be dependant on the end cut type ? -->
                    <!-- Values are No ____ the SymbolsAtEndsOfProfile option will always be used (** default **) -->
                    <!--            Yes ___ symbols will be chosen in following settings according to EndCut type -->
                    <std:enumval name="YesNo">Yes</std:enumval>
                  </std:node>
                  <std:node name="Snipe">
                    <std:strval>NotFilledArrow_3x1.5</std:strval>
                  </std:node>
                  <std:node name="Weld">
                    <std:strval>HalfArrow_3x1.5</std:strval>
                  </std:node>
                  <std:node name="Trim">
                    <std:strval>T-A49XH</std:strval>
                  </std:node>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="DoubleLine">
              <std:node name="ExtremitySymbol">
                <std:node name="Draw">
                  <!-- Should it draw arrowheads at ends of Beam ? -->
                  <!-- Values are No ____ no symbols representing the Beam ends will be drawn (** default **) -->
                  <!--            Yes ___ symbols representing Beam end will be used (see "EndSymbolDetailName" setting) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <std:node name="MinimumLengthRatio">
                  <!-- Minimum length of Beam at which the end symbol will be displayed -->
                  <!-- Value is between 0 and 1.                                             -->
                  <!-- A Value of 0 will result in no end symbol being placed, while a value -->
                  <!-- of 1 will result in a display if the end symbol is smaller than the   -->
                  <!-- length of the Beam.  Default is .45                              -->
                  <std:floatval>.45</std:floatval>
                </std:node>
                <std:node name="ReferenceScale">
                  <!-- The scale to set the Flange Orientation Detail to -->
                  <!-- Default value is 1.0  -->
                  <std:floatval>1.0</std:floatval>
                </std:node>
                <std:node name="ChapterName">
                  <!-- The name of the chapter containing end symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                  <!-- Default value is "Ends" -->
                  <std:strval>Ends</std:strval>
                </std:node>
                <std:node name="ExtremitySymbolByEndCutType">
                  <std:node name="Snipe">
                    <std:strval>ec_45_degree</std:strval>
                  </std:node>
                  <std:node name="Weld">
                    <std:strval>ec_60_degree</std:strval>
                  </std:node>
                  <std:node name="Trim">
                    <std:strval>ec_45_degree_dbl</std:strval>
                  </std:node>
                </std:node>
              </std:node>
            </std:node>
            <!--fin du noed SideView-->
          </std:node>
            <!--fin du noed SideView-->
           <std:node name="AnyView">
            <std:node name="3DParameters">
              <std:node name="SingleLine">
                <std:node name="Draw">
                  <!-- Should it draw the SingleLine ? -->
                  <!-- Values are No ____ the Trace of the Beam will not be extracted -->
                  <!--            Yes ___ the Trace of the Beam will be extracted (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <std:node name="ShrinkMode">
                  <!-- What measurement mode should be applied while shrinking the Single Line ? -->
                  <!-- Values are Relative ____ a value between 0 and 1 is required. No magnitude needed. -->
                  <!-- Values are Absolute ____ the value must include a magniture or the model default (mm) is applied. -->
                  <std:enumval name="DistanceMode">Absolute</std:enumval>
                </std:node>
                <std:node name="ShrinkValue">
                  <std:strval>10mm</std:strval>
                </std:node>
              </std:node>
              <std:node name="DoubleLine">
                <std:node name="Draw">
                  <!-- Should it draw the DoubleLine ? -->
                  <!-- Values are No ____ the 3DBeam will not be extracted -->
                  <!--            Yes ___ the 3DBeam will be extracted (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <std:node name="ShrinkMode">
                  <!-- What measurement mode should be applied while shrinking the DoubleLine ? -->
                  <!-- Values are Relative ____ a value between 0 and 1 is required. No magnitude needed. -->
                  <!-- Values are Absolute ____ the value must include a magniture or the model default (mm) is applied. -->
                  <std:enumval name="DistanceMode">Relative</std:enumval>
                </std:node>
                <std:node name="ShrinkValue">
                  <std:strval>0.5</std:strval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side beams ? -->
                <!-- Values are No ____ near side Pillar will not be drawn -->
                <!--            Yes ___ near side Pillar will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Pillar representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side Pillar ? -->
                <!-- Values are No ____ far side Pillar will not be drawn (** default **) -->
                <!--            Yes ___ far side Pillar will be drawn -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side Pillar representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>ToBeDefined</std:strval>
              </std:node>
            </std:node>
            <!--fin du noed EndView-->
          </std:node>                    
        </std:node>
        <!-- fin du noeud Beam-->
      </std:node>
      <!-- ********************************************************************************************* -->
      <std:node name="Plate">
        <!--Shell subtype of plate.  We want to see ATS in AnyView -->
        <std:node name="Deck" >
          <std:node name="ViewType">
            <std:node name="SideView">
              <std:node name="FarSide">
                <std:node name="LineColor">
                  <std:node name="3DInheritance">
                    <std:enumval name="YesNo">No</std:enumval>
                  </std:node>
                  <std:node name="Color">
                    <std:colorval>10 20 60</std:colorval>
                  </std:node>
                </std:node>
              </std:node>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Transverse Bulkhead" >
          <std:node name="ViewType">
            <std:node name="SideView">
              <std:node name="FarSide">
                <std:node name="LineColor">
                  <std:node name="3DInheritance">
                    <std:enumval name="YesNo">No</std:enumval>
                  </std:node>
                  <std:node name="Color">
                    <std:colorval>10 20 60</std:colorval>
                  </std:node>
                </std:node>
              </std:node>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="Longitudinal Bulkhead" >
          <std:node name="ViewType">
            <std:node name="SideView">
              <std:node name="FarSide">
                <std:node name="LineColor">
                  <std:node name="3DInheritance">
                    <std:enumval name="YesNo">No</std:enumval>
                  </std:node>
                  <std:node name="Color">
                    <std:colorval>10 20 60</std:colorval>
                  </std:node>
                </std:node>
              </std:node>
            </std:node>
          </std:node>
        </std:node>

        <!--Shell subtype of plate.  We want to see ATS in AnyView -->
        <std:node name="Shell" >
          <std:node name="ViewType">
            <std:node name="AnyView">
              <std:node name="AnnotationTextStyle">
                <std:node name="Draw">
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
              </std:node>
            </std:node>
          </std:node>
        </std:node>
        <!-- PLATE -->
        <std:node name="Draw">
          <!-- Should it draw the plate ? -->
          <!-- Values are No ____ the plate will not be drawn  -->
          <!--            Yes ___ the plate will be extracted (with or without GR - see "GraphicReplacement" setting) (** default **) -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="GraphicReplacement">
          <!-- Should it use the graphic replacement ? -->
          <!-- Values are No ____ no Graphic Replacements will be used (ie. will project the 3D only) (** default **) -->
          <!--      Yes ___ Graphic Replacements will be used -->
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="AngularTolerance">
          <!-- Angular tolerance for to trigger this type of View in degrees -->
          <!-- Default value is 15.0  -->
          <std:floatval>15.0</std:floatval>
        </std:node>
        <std:node name="LogicalViewGeneration">
          <std:node name="PropagationOnSupport">
            <!-- Should it use the Propagation on SuperPlates ? -->
            <!-- Values are No ____ no Propagation will be used (ie. will project the 3D only) (** default **) -->
            <!--      Yes ___ Propagation will be used -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="OffsetTolerance">
            <!-- Offset value used to include or exclude objects using the same support with  -->
            <!-- different offsets -->
            <!-- Default value is 0.0 -->
            <std:floatval>0.0</std:floatval>
          </std:node>
        </std:node>
        <std:node name="ViewType">
          <std:node name="SideView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side Plate ? -->
                <!-- Values are No ____ far side Plate will not be drawn -->
                <!--            Yes ___ far side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side Plate representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noed FarSide-->
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_plate_name</std:strval>
              </std:node>
            </std:node>
            <std:node name="MaterialExtrusionSymbol">
              <std:node name="Draw">
                <!-- Should it draw far side Plate ? -->
                <!-- Values are No ____ far side Plate will not be drawn -->
                <!--            Yes ___ far side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="MaterialExtrusionMode">
                <!-- Values are 'Tick mark (true width)' __________ draw only the Tick Mark (see the TM_OffsetFromEndOfMember, and TM_Length settings) -->
                <!--            'Throw orientation (symbolic)' ____ draw only the Material Throw Orientation (see the MTO_DetailName setting) -->
                <!--            'Tick mark and throw orientation'__ draw both the Material Throw Orientation and the Tick Mark -->
                <std:enumval name="MaterialExtrusion">Throw orientation (symbolic)</std:enumval>
              </std:node>
              <std:node name="SymbolLocation">
                <std:enumval name="ProfileLocation">Middle</std:enumval>
              </std:node>
              <std:node name="MaterialThroughOrientationSymbol">
                <std:node name="ChapterName">
                  <!-- The name of the chapter containing MTO symbols within the Drawing Symbol Structure Catalog (refer to PRM file) -->
                  <!-- Default value is "MTOs" -->
                  <std:strval>MTOs</std:strval>
                </std:node>
                <std:node name="SymbolName">
                  <!-- The name of the detail within the catalog to instanciate for Material Throw Orientation -->
                  <!-- Default value is "BlackFilledRectangle_5x1" -->
                  <!-- Important: this setting is used only when the MaterialThrowOrientation setting is set to 1 or 3 -->
                  <std:strval>BlackFilledRectangle_5x1_CTR</std:strval>
                </std:node>
                <std:node name="ReferenceScale">
                  <!-- The scale to set the Flange Orientation Detail to -->
                  <!-- Default value is 1.0  -->
                  <std:floatval>1.0</std:floatval>
                </std:node>
              </std:node>
              <std:node name="TickMarkSymbol">
                <std:node name="Length">
                  <!-- The Tick Mark length -->
                  <!-- Default value is 5.0 millimeters -->
                  <std:floatval>5.0</std:floatval>
                </std:node>
              </std:node>  
            </std:node>
            <!--fin du noed SideView-->
          </std:node>
          <std:node name="AnyView">
            <std:node name="NearSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="FarSide">
              <std:node name="Draw">
                <!-- Should it draw far side Plate ? -->
                <!-- Values are No ____ far side Plate will not be drawn -->
                <!--            Yes ___ far side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="4" maxval="63">
                <!-- The line type index to use for far side Plate representation -->
                <!-- Default value is 4 (phantom line type) -->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noed FarSide-->
            </std:node>
            <std:node name="AccrossSide">
              <std:node name="Draw">
                <!-- Should it draw near side Plate ? -->
                <!-- Values are No ____ near side Plate will not be drawn -->
                <!--            Yes ___ near side Plate will be drawn (** default **) -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="Linetype" minval="1" maxval="63">
                <!-- The line type index to use for near side Plate representation -->
                <!-- Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!-- The thickness of the GR representation -->
                <!-- Default value is 2 -->
                <std:intval>2</std:intval>
              </std:node>
              <std:node name="LineColor">
                <std:node name="3DInheritance">
                  <!-- Should the LineColor inherit the color from the 3d object ? -->
                  <!-- Values are No ____ Color not inherited -->
                  <!--            Yes ___ Color is inherited (** default **) -->
                  <std:enumval name="YesNo">Yes</std:enumval>
                </std:node>
                <!-- Color to use if 3DInheritance is No ? -->
                <std:node name="Color">
                  <std:colorval>0 0 0</std:colorval>
                </std:node>
              </std:node>
              <!--fin du noeud NearSide-->
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_plate_name</std:strval>
              </std:node>
            </std:node>
            <std:node name="SlotSymbol">
              <std:node name="Draw">
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="ReferenceScale">
                <!-- The scale to set the Slot Symbol Detail to -->
                <!-- Default value is 100.0  -->
                <std:floatval>100.0</std:floatval>
              </std:node>
              <std:node name="ChapterName">
                <std:strval>Slots</std:strval>
              </std:node>
              <std:node name="SlotSymbolBySlotType">
                <std:node name="Tee_Slot_thru_Plate">
                  <std:strval>slot_1</std:strval>
                </std:node>
                <std:node name="Tee_Slot_thru_Shape">
                  <std:strval>slot_2</std:strval>
                </std:node>
                <std:node name="Welded_Slot_for_Tee">
                  <std:strval>slot_3</std:strval>
                </std:node>
                <std:node name="CC-10">
                  <std:strval>slot_4</std:strval>
                </std:node>
                <std:node name="CC-10-2Tee_thru_Shape">
                  <std:strval>slot_5</std:strval>
                </std:node>
                <std:node name="Smart_Param_CC-10">
                  <std:strval>slot_6</std:strval>
                </std:node>
              </std:node>
            </std:node>
            <!--fin du noed AnyView-->
          </std:node>
          <!--fin du noed ViewType-->
        </std:node>
        <!--fin du noeud Plate-->
      </std:node>
      <!-- ********************************************************************************************* -->
      <std:node name="Opening">
        <std:node name="GraphicReplacement">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="ViewType">
          <!--  The View Type is inherited from the Plate -->
          <std:node name="SideView">
            <std:node name="Draw">
              <!--  Should it draw SideView Opening ?  -->
              <!--  Values are No ____ SideView Opening will not be drawn -->
              <!--             Yes ___ SideView Opening will be drawn (** default **) -->
              <std:enumval name="YesNo">Yes</std:enumval>
            </std:node>
            <std:node name="LineType" minval="1" maxval="63">
              <!--  The line type index to use for SideView Opening representation -->
              <!--  Default value is 1 (solid line type) -->
              <std:intval>1</std:intval>
            </std:node>
            <std:node name="LineThickness" minval="1">
              <!--  The thickness of the GR representation -->
              <!--  Default value is 2 -->
              <std:intval>2</std:intval>
            </std:node>
            <std:node name="ButterflyThickness">
              <std:floatval>5.0</std:floatval>
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_opening_name</std:strval>
              </std:node>
            </std:node>
          </std:node>
          <std:node name="AnyView">
            <std:node name="DashX">
              <std:node name="Draw">
                <!--  Should it draw DashX Opening ? -->
                <!--  Values are No ____ DashX Opening will not be drawn -->
                <!--             Yes ___ DashX Opening will be drawn (** default **)  -->
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <std:node name="LineType" minval="1" maxval="63">
                <!--  The line type index to use for SideView Opening representation -->
                <!--  Default value is 4 (phantom line type)-->
                <std:intval>4</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!--  The thickness of the GR representation -->
                <!--  Default value is 2 -->
                <std:intval>1</std:intval>
              </std:node>
            </std:node>
            <std:node name="ShortAxis">
              <std:node name="Draw">
                <!--  Should it draw ShortAxis Opening ? -->
                <!--  Values are No ____ ShortAxis Opening will not be drawn -->
                <!--             Yes ___ ShortAxis Opening will be drawn (** default **) -->
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="LineType" minval="1" maxval="63">
                <!--  The line type index to use for Opening centerline representation -->
                <!--  Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!--  The thickness of the GR representation -->
                <!--  Default value is 2 -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="AxisType">
                <!--  Setting for Oblong openings. Specify "Double" or "Single" Axis-->
                <!--  Default value is "Double" -->
                <std:enumval name="AxisTypeEnum">Double</std:enumval>
              </std:node>
            </std:node>
            <std:node name="LongAxis">
              <std:node name="Draw">
                <!--  Should it draw LongAxis Opening ? -->
                <!--  Values are No ____ LongAxis Opening will not be drawn-->
                <!--             Yes ___ LongAxis Opening will be drawn (** default **)-->
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <std:node name="LineType" minval="1" maxval="63">
                <!--  The line type index to use for Opening centerline representation -->
                <!--  Default value is 1 (solid line type) -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="LineThickness" minval="1">
                <!--  The thickness of the GR representation-->
                <!--  Default value is 2 -->
                <std:intval>1</std:intval>
              </std:node>
              <std:node name="AxisType">
                <!--  Setting for Oblong openings. Specify "Double" or "Single" Axis-->
                <!--  Default value is "Double" -->
                <std:enumval name="AxisTypeEnum">Double</std:enumval>
              </std:node>
            </std:node>
            <std:node name="AnnotationTextStyle">
              <std:node name="Draw">
                <std:enumval name="YesNo">Yes</std:enumval>
              </std:node>
              <!-- ********* "Yes" causes inclusion of a leader -->
              <std:node name="ATS_AutoPosition">
                <std:enumval name="YesNo">No</std:enumval>
              </std:node>
              <!-- ********* Non zero values cause inclusion of a leader -->
              <std:node name="ATS_CharacterOffset">
                <std:intval>0</std:intval>
              </std:node>
              <!-- ********* ATS Attribute names, comma separated if more than one * -->
              <std:node name="ATS_Attribute">
                <std:strval>sfm_opening_name</std:strval>
              </std:node>
            </std:node>
          </std:node>
          <!-- fin du noed ViewType-->
        </std:node>
        <!-- fin du noeud Opening-->
        <!--New node for StructureObjects -->
      <std:node name="Connection">
        <std:node name="Draw">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="WeldSeam">
          <std:node name="AngularTolerance">
            <std:floatval>1.0</std:floatval>
          </std:node>
          <std:node name="UseSymbol">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="S_Representation">
            <std:node name="LongWeldSeam">
              <std:node name="Offset">
                <std:floatval>3.0</std:floatval>
              </std:node>
              <std:node name="Thickness">
                <std:floatval>3.0</std:floatval>
              </std:node>
            </std:node>
            <std:node name="ShortWeldSeam">
              <std:node name="Gap">
                <std:floatval>1</std:floatval>
              </std:node>
              <std:node name="Length">
                <std:floatval>5</std:floatval>
              </std:node>
            </std:node>
            <!--end S_Representation-->
          </std:node>
          <std:node name="SymbolicRepresentation">
            <std:node name="WeldSeam">
              <std:node name="ChapterName">
                <std:strval>Connections</std:strval>
              </std:node>
              <std:node name="DetailName">
                <std:strval>S_5x1</std:strval>
              </std:node>
            </std:node>
            <std:node name="WeldSeamWithKnuckle">
              <std:node name="ChapterName">
                <std:strval>Connections</std:strval>
              </std:node>
              <std:node name="DetailName">
                <std:strval>SwKnuckle_5x1</std:strval>
              </std:node>
            </std:node>
            <!--end SymbolicRepresentation-->
          </std:node>
          <!--end WeldSeam-->
        </std:node>
        <std:node name="TightHiddenPlate">
          <std:node name="StraightLineType" minval="1" maxval="63">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="CurvedLineType" minval="1" maxval="63">
            <std:intval>1</std:intval>
          </std:node>
          <std:node name="CurvedLineThickness" minval="1">
            <std:intval>2</std:intval>
          </std:node>
          <!--end TightHiddenPlate-->
        </std:node>
        <!--end Connection-->
      </std:node>
      <!--fin du noeud StructureObjects-->
    </std:node>
    </std:node>
    <std:node name="EquipmentSupport">
      <std:node name="Member">
        <std:node name="Extraction">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="GraphicReplacement">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="EndCuts">
          <std:node name="ShowEndCutName">
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="FontSize">
            <std:floatval>3.5</std:floatval>
          </std:node>
          <std:node name="UseLeader">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="LeaderSymbol">
            <std:intval>1</std:intval>
          </std:node>
        </std:node>
        <std:node name="StructuralMode">
          <std:enumval name="YesNo">No</std:enumval>
        </std:node>
        <std:node name="StructuralChapterName">
          <std:strval>Orientations</std:strval>
        </std:node>
        <std:node name="StructuralSymbolDefault">
          <std:strval>StructuralTee</std:strval>
        </std:node>
        <std:node name="StructuralSymbolByProfileType">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="SymbolsByProfileType">
          <std:node name="Angle">
            <std:strval>StructuralAngle</std:strval>
          </std:node>
          <std:node name="Tee">
            <std:strval>StructuralTee</std:strval>
          </std:node>
        </std:node>
        <std:node name="AngularToleranceForEndView">
          <std:floatval>15.0</std:floatval>
        </std:node>
        <std:node name="ShowNearSide">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="ShowFarSide">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="FarSideLinetype" minval="1" maxval="63">
          <std:intval>2</std:intval>
        </std:node>
        <std:node name="NearSideLinetype" minval="1" maxval="63">
          <std:intval>1</std:intval>
        </std:node>
        <std:node name="SymbolsAtEndsOfProfile">
          <std:node name="UseAnEndSymbol">
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="ChapterName">
            <std:strval>Ends</std:strval>
          </std:node>
          <std:node name="DefaultDetailName">
            <std:strval>BlackFilledArrow_3x1.5</std:strval>
          </std:node>
        </std:node>
      </std:node>
      <std:node name="Plate">
        <std:node name="Extraction">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="GraphicReplacement">
          <std:enumval name="YesNo">Yes</std:enumval>
        </std:node>
        <std:node name="Linetype" minval="1" maxval="63">
          <std:intval>1</std:intval>
        </std:node>
        <std:node name="LineThickness" minval="1">
          <std:intval>2</std:intval>
        </std:node>
        <std:node name="MaterialExtrusion">
          <std:node name="MaterialThrowOrientation">
            <std:enumval name="MaterialExtrusion">Tick mark and throw orientation</std:enumval>
          </std:node>
          <std:node name="MTOSymbolsChapterName">
            <std:strval>MTOs</std:strval>
          </std:node>
          <std:node name="MTO_DetailName">
            <std:strval>BlackFilledRectangle_5x1</std:strval>
          </std:node>
          <std:node name="TM_Length">
            <std:floatval>10.0</std:floatval>
          </std:node>
        </std:node>
        <std:node name="PiecePartNumber">
          <std:node name="Extraction">
            <!-- Should it draw the piece part number ? -->
            <!-- Values are No ___ no piece part number will be drawn -->
            <!--            Yes __ the piece part number will be drawn (** default **) -->
            <std:enumval name="YesNo">Yes</std:enumval>
          </std:node>
          <std:node name="GraphicProperties">
            <std:node name="FontSize">
              <!-- The size of the piece part number text -->
              <!-- Default is 2.0 -->
              <std:floatval>3.0</std:floatval>
            </std:node>
            <std:node name="Border">
              <!-- Defines the border style around the part number text -->
              <!-- Default is None -->
              <std:enumval name="PiecePartNumberBorder">Oblong</std:enumval>
            </std:node>
          </std:node>
        </std:node>
        <std:node name="GlobalOrientations">
          <std:node name="Extraction">
            <!-- Should it draw the orientation symbol ? -->
            <!-- Values are No ___ no orientation will be drawn -->
            <!--            Yes __ the orientation will be drawn (** default **) -->
            <std:enumval name="YesNo">No</std:enumval>
          </std:node>
          <std:node name="GraphicProperties">
            <std:node name="GO_ZPlusOrient_Symbol">
              <!-- The letter used for ZPlusOrient orientation -->
              <!-- Default value is "U" -->
              <std:strval>U</std:strval>
            </std:node>
            <std:node name="GO_ZMinOrientName_Symbol">
              <!-- The letter used for ZMinOrientName orientation -->
              <!-- Default value is "L" -->
              <std:strval>L</std:strval>
            </std:node>
            <std:node name="GO_XPlusOrientName_Symbol">
              <!-- The letter used for XPlusOrientName orientation -->
              <!-- Default value is "A" -->
              <std:strval>A</std:strval>
            </std:node>
            <std:node name="GO_XMinOrientName_Symbol">
              <!-- The letter used for XMinOrientName orientation -->
              <!-- Default value is "F" -->
              <std:strval>F</std:strval>
            </std:node>
            <std:node name="GO_YPlusOrientName_Symbol">
              <!-- The letter used for YPlusOrientName orientation -->
              <!-- Default value is "S" -->
              <std:strval>S</std:strval>
            </std:node>
            <std:node name="GO_YMinOrientName_Symbol">
              <!-- The letter used for YMinOrientName orientation -->
              <!-- Default value is "P" -->
              <std:strval>P</std:strval>
            </std:node>
            <std:node name="GO_HullInOrientName_Symbol">
              <!-- The letter used for HullInOrientName orientation -->
              <!-- Default value is "I" -->
              <std:strval>I</std:strval>
            </std:node>
            <std:node name="GO_HullOutOrientName_Symbol">
              <!-- The letter used for outboard orientation -->
              <!-- Default value is "O" -->
              <std:strval>O</std:strval>
            </std:node>
            <std:node name="FontSize">
              <!-- The size of the piece part number text -->
              <!-- Default is 2.0 -->
              <std:floatval>3.0</std:floatval>
            </std:node>
          </std:node>
          <std:node name="GO_SymbolsChapterName">
            <!-- The name of the chapter containing global orientation symbols within  -->
            <!-- the Drawing Symbol Structure Catalog (refer to PRM file) -->
            <!-- Default value is "Orientations" -->
            <std:strval>Orientations</std:strval>
          </std:node>
          <std:node name="GO_DetailName">
            <!-- The name of the detail within the catalog to instanciate for Material Throw Orientation -->
            <!-- Default value is "Orient_15x15" -->
            <std:strval>Orient_15x15</std:strval>
          </std:node>
        </std:node>
      </std:node>
    </std:node> 
    <!--end Structure-->
  </std:node>
  <!--end Generativeparameters-->
</std:node>
